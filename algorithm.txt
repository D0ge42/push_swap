#How does it work

We slowly push everything from STACK_A TO STACK_B in descending order.

**Biggest -> Lowest. After we push them back to stack_a they will be sorted.**

> If the number we push from STACK_A to STACK_B is going to be the new
BIGGEST OR SMALLEST number, we place it above BIGGEST number in STACK_B.

STACK_A        STACK_B
 1 ----------->
 9              4
 7              3
 8              2

 We push number 1. Number 1 will be the new SMALLEST number in STACK_B.
 It means it will be placed on top of the BIGGEST NUMBER of STACK_B.

STACK_A        STACK_B
                1
 9              4
 7              3
 8              2

 Now we rotate STACK_B to bring it in correct position.


STACK_A        STACK_B
                
 9              4
 7              3  (ROTESCION)
 8              2
                1

What would happen if we push 9? 

STACK_A        STACK_B
 
 9 ------------>
 7              4
 8              3
                2       
                1

After pushing it on top of the STACK_B BIGGEST number.

STACK_A        STACK_B
 
                9
 7              4
 8              3
                2       
                1

If pushing number is neither MAX nor MIN, it should be somewhere inside STACK_B.
We'll have to find it manually.

Magic  number is 3. If stack_size is 3 -> We only need one operation to sort stack.
Except for two cases :

1 -> (descending sorted stack, such as 3 2 1). 

2 -> Sequence where the greatest nummber and second greates number switched places.
---> Such as 1-3-2

Both of the previous scenarios would need 2 moves.

For now, let's remember 3 as the magic number.

If we've to rotate 3 times STACK_A and 4 times STACK_B we can rotate like this:

3 rrr and 1 rb  by choosing the least common number and rotate both stacks by this number.

4 operations instead of 4 + 3 = 7.

We''ll always calculate before rotation.

Let's sort a stack.

STACK_A       STACK_B

  5
  2
  7
  1
  6
  3
  9
  4
  8

----------------------

STACK_A       STACK_B

  7              
  1
  6
  3             2               pb x2
  9             5
  4
  8

----------------------

Now we'll calculate how many operations it would take to push
the number into the correct position in the STACK_B. Let's start.

7: We need to rotate STACK_B and then "pb". That's because 5 is below
and we need to put it on top of the BIGGEST number in b. 
So it will take two moves. That means that if we don't find a number that takes less
than 2 moves, that's gonna be the best option.

1: We need to rotate STACK_A And STACK_B. So rr + pb -> 2 moves. Same as number 7.

6: We need to put 6 on top of STACK_A by doing 2 ra and rotate b once.
So it can be 1 rr, 1 ra, 1 pb = 3 moves.

3: We need to put 3 on top of the stack. So we need 3 ra, 1 rb and 1 push.
Which can be 1rr 2ra and 1 pb. = 4 moves.

So we've to push 7. (That happens probably because 5 is below, so min numbers of moves
is 2).



STACK_A       STACK_B

  1             
  6             
  3             7           
  9             5
  4             2
  8

----------------------


Again we start calculations one by one for each number in the STACK_A.

Since 1 will only take 1 move, it's gonna be the cheapest.
(Lowest number on top of the highest one.)

STACK_A       STACK_B

               
  6             1
  3             7           
  9             5
  4             2
  8

----------------------

Let's calculate again.

6: It should be on top of 5. This mean 2x rb and 1 pb = 3 moves.
3: Should be right on top of 2. 1 ra + 1rrb + 1 pb = 3.
By keep going we''ll notice that 8 requires 3 moves as 6 (1 rra, 1 rb, 1 pb)
but first cheapest number is 6, so we push 6.


STACK_A       STACK_B

               
                1
  3             7
  9             6
  4             5
  8             2
  

----------------------

Let's calculate again.

3 has to be on top of 2. This mean 2 rb + 1 pb = 3 moves.
9 has to be on top of 7. 1ra 1 rrb + 1 pb = 3 moves.
4 has to be on top of 2. 2 rb + 2a -> 2rr -> 1 pb = 3 moves.
8 has to be on top of 7. 1 rrr + 1 pb = 2 moves.



STACK_A       STACK_B
                
                
                 8    
  3              7
  9              6
  4              5          1 rrr + 1 pb .
                 2
                 1           

----------------------

Now that we've 3 we can stop calculating. We don't need to push the number to STACK_B
anymore. We can sort these 3 numbers in only one operation. In the worst case, it would be two.
Our case is the worst possible case we could get.

We 've to do a swap and a roration in stack_a.

STACK_A       STACK_B
                
                
                 8    
  3              7
  4              6                   4              3
  9              5          1 rra -> 3 --> 1 sa --> 4 --> 2 moves.
                 2                   9              9
                 1           

----------------------

At this stage, we push everything from STACK_B to STACK_A. With one single exception.
Everytime before pushing a number, we check if it being pushed in the correct position.
If not we rotate STACK_A until correct positions comes up.

Here we need to rotate once STACK_A cause 8 has to be on top of 9.

STACK_A       STACK_B
                
  8              7
  9              6    
  3              5               rra  x1 --> pb = 2 moves. 
  4              2                          
                 1           
                                            
----------------------

7 has to be on top of 8.    


STACK_A       STACK_B
                
  7              
  8              6    
  9              5               1 pb = 1 moves.
  3              2                          
  4              1           
                                            
----------------------

6 has to be on top of 7.  

STACK_A       STACK_B
                
  6              
  7                  
  8              5               1 pb = 1 moves.
  9              2                          
  3              1   
  4                         
                                            
----------------------

5 has to be on top of 6.

STACK_A       STACK_B
                
  5              
  6                  
  7                             1 pb = 1 moves.
  8              2                          
  9              1   
  3                         
  4                                          
----------------------

2 has to be on top of 3.

STACK_A       STACK_B

  2              
  3              
  4                  
  5                             2x rra + 1 pb = 3 moves.
  6                                        
  7              1   
  8                         
  9                                          
----------------------

STACK_A       STACK_B

  1
  2              
  3              
  4                             We've to make sure our minimum is at the top.
  5                             1 pb = 1 move.
  6                                        
  7               
  8                         
  9                                          
----------------------

